1 Mar 2024 (v0.0.8)
- Added automatic parsing of fn_description from external function's docstring if fn_description is not provided for `Function()`
- type checks now support `array`: same functionality as `list`, but LLM may understand `array` better due to JSON formatting type
- Auto type conversion from list to array after `type:` in `output_format`

29 Feb 2024 (v0.0.7)
- Throws an exception when `type:` is given in `output_format` for `Function()` when using External Functions as we do not do type checking there
- Throws a similar exception when `type:` is given in `output_format` for `openai_json_mode = True` in `strict_json` or `Function`

28 Feb 2024 (v0.0.6)
- Made list processing in StrictJSON more robust

26 Feb 2024 (v0.0.5)
- Added memory and RAG on functions and additional context based on task / overall plan

25 Feb 2024 (v0.0.4)
- Added shared variables, enabling a pool of shared variables to persist between functions for better handling of non-text modalities as well as long text
- Refined the prompt for get_next_subtask() in order to do element by element check of whether the Overall Plan is completed
- Changed the dictionary parsing of StrictJSON to ensure that we extract the leftmost and rightmost { and } respectively to do ast.literal_eval. Previously might have the quotation marks at the left and right which affected parsing
- Changed the bool parsing of StrictJSON to convert true/false to True/False first so as to make it parseable by ast.literal_eval

22 Feb 2024 (v0.0.3)
- Added hierarchical agents
- Refined prompts for use_llm and reply_user
- Agents now use subtasks_completed as a memory for context for future generation

17 Feb 2024 (v0.0.1)
- Creation of TaskGen, a task-based agentic framework building on StrictJSON outputs by LLM agents